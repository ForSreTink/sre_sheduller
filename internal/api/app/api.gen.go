// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.5-0.20230403173426-fd06f5aed350 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
)

// Defines values for PostWorkWorkType.
const (
	PostWorkWorkTypeAutomatic PostWorkWorkType = "automatic"
	PostWorkWorkTypeManual    PostWorkWorkType = "manual"
)

// Defines values for WorkPriority.
const (
	Critical WorkPriority = "critical"
	Regular  WorkPriority = "regular"
)

// Defines values for WorkStatus.
const (
	WorkStatusCancelled  WorkStatus = "cancelled"
	WorkStatusInProgress WorkStatus = "in_progress"
	WorkStatusPlanned    WorkStatus = "planned"
)

// Defines values for WorkWorkType.
const (
	WorkWorkTypeAutomatic WorkWorkType = "automatic"
	WorkWorkTypeManual    WorkWorkType = "manual"
)

// Defines values for GetscheduleParamsStatuses.
const (
	GetscheduleParamsStatusesCancelled  GetscheduleParamsStatuses = "cancelled"
	GetscheduleParamsStatusesInProgress GetscheduleParamsStatuses = "in_progress"
	GetscheduleParamsStatusesPlanned    GetscheduleParamsStatuses = "planned"
)

// Error defines model for error.
type Error struct {
	Alternative *[]struct {
		Deadline        *time.Time `json:"deadline,omitempty"`
		DurationMinutes *int32     `json:"durationMinutes,omitempty"`
		StartDate       *time.Time `json:"startDate,omitempty"`
		Zones           *[]string  `json:"zones,omitempty"`
	} `json:"alternative,omitempty"`
	ErrorCode *string `json:"errorCode,omitempty"`
	Message   *string `json:"message,omitempty"`
}

// MoveWork defines model for moveWork.
type MoveWork struct {
	DurationMinutes *int32    `json:"durationMinutes,omitempty"`
	StartDate       time.Time `json:"startDate"`
}

// PostWork defines model for postWork.
type PostWork struct {
	Deadline        *time.Time        `json:"deadline,omitempty"`
	DurationMinutes *int32            `json:"durationMinutes,omitempty"`
	StartDate       *time.Time        `json:"startDate,omitempty"`
	WorkType        *PostWorkWorkType `json:"workType,omitempty"`
	Zones           *interface{}      `json:"zones,omitempty"`
}

// PostWorkWorkType defines model for PostWork.WorkType.
type PostWorkWorkType string

// ProlongateWork defines model for prolongateWork.
type ProlongateWork struct {
	DurationMinutes *int32 `json:"durationMinutes,omitempty"`
}

// Work defines model for work.
type Work struct {
	Deadline        *time.Time    `json:"deadline,omitempty"`
	DurationMinutes *int32        `json:"durationMinutes,omitempty"`
	Id              *string       `json:"id,omitempty"`
	Priority        *WorkPriority `json:"priority,omitempty"`
	StartDate       *time.Time    `json:"startDate,omitempty"`
	Status          *WorkStatus   `json:"status,omitempty"`
	WorkType        *WorkWorkType `json:"workType,omitempty"`
	Zones           *[]string     `json:"zones,omitempty"`
}

// WorkPriority defines model for Work.Priority.
type WorkPriority string

// WorkStatus defines model for Work.Status.
type WorkStatus string

// WorkWorkType defines model for Work.WorkType.
type WorkWorkType string

// GetscheduleParams defines parameters for Getschedule.
type GetscheduleParams struct {
	// FromDate Starts from
	FromDate *time.Time `form:"fromDate,omitempty" json:"fromDate,omitempty"`

	// ToDate Starts to
	ToDate *time.Time `form:"toDate,omitempty" json:"toDate,omitempty"`

	// Zones List of zones
	Zones *[]string `form:"zones,omitempty" json:"zones,omitempty"`

	// Statuses Statuses of work to get
	Statuses *[]GetscheduleParamsStatuses `form:"statuses,omitempty" json:"statuses,omitempty"`
}

// GetscheduleParamsStatuses defines parameters for Getschedule.
type GetscheduleParamsStatuses string

// AddWorkJSONRequestBody defines body for AddWork for application/json ContentType.
type AddWorkJSONRequestBody = PostWork

// MoveWorkByIdJSONRequestBody defines body for MoveWorkById for application/json ContentType.
type MoveWorkByIdJSONRequestBody = MoveWork

// ProlongateWorkByIdJSONRequestBody defines body for ProlongateWorkById for application/json ContentType.
type ProlongateWorkByIdJSONRequestBody = ProlongateWork

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get schedule with works
	// (GET /schedule)
	Getschedule(w http.ResponseWriter, r *http.Request, params GetscheduleParams)
	// Create new planned work in avialable zone
	// (POST /work)
	AddWork(w http.ResponseWriter, r *http.Request)
	// Get planned work by id
	// (GET /work/{workId})
	GetWorkById(w http.ResponseWriter, r *http.Request, workId string)
	// Cancel planned work by id
	// (PUT /work/{workId}/cancel)
	CancelWorkById(w http.ResponseWriter, r *http.Request, workId string)
	// Move start time and duration for planned work
	// (PUT /work/{workId}/move)
	MoveWorkById(w http.ResponseWriter, r *http.Request, workId string)
	// Prolongate work duration started work
	// (PUT /work/{workId}/prolongate)
	ProlongateWorkById(w http.ResponseWriter, r *http.Request, workId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// Getschedule operation middleware
func (siw *ServerInterfaceWrapper) Getschedule(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetscheduleParams

	// ------------- Optional query parameter "fromDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "fromDate", r.URL.Query(), &params.FromDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fromDate", Err: err})
		return
	}

	// ------------- Optional query parameter "toDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "toDate", r.URL.Query(), &params.ToDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "toDate", Err: err})
		return
	}

	// ------------- Optional query parameter "zones" -------------

	err = runtime.BindQueryParameter("form", true, false, "zones", r.URL.Query(), &params.Zones)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "zones", Err: err})
		return
	}

	// ------------- Optional query parameter "statuses" -------------

	err = runtime.BindQueryParameter("form", true, false, "statuses", r.URL.Query(), &params.Statuses)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "statuses", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Getschedule(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AddWork operation middleware
func (siw *ServerInterfaceWrapper) AddWork(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddWork(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetWorkById operation middleware
func (siw *ServerInterfaceWrapper) GetWorkById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "workId" -------------
	var workId string

	err = runtime.BindStyledParameter("simple", false, "workId", mux.Vars(r)["workId"], &workId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWorkById(w, r, workId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CancelWorkById operation middleware
func (siw *ServerInterfaceWrapper) CancelWorkById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "workId" -------------
	var workId string

	err = runtime.BindStyledParameter("simple", false, "workId", mux.Vars(r)["workId"], &workId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CancelWorkById(w, r, workId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// MoveWorkById operation middleware
func (siw *ServerInterfaceWrapper) MoveWorkById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "workId" -------------
	var workId string

	err = runtime.BindStyledParameter("simple", false, "workId", mux.Vars(r)["workId"], &workId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.MoveWorkById(w, r, workId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ProlongateWorkById operation middleware
func (siw *ServerInterfaceWrapper) ProlongateWorkById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "workId" -------------
	var workId string

	err = runtime.BindStyledParameter("simple", false, "workId", mux.Vars(r)["workId"], &workId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ProlongateWorkById(w, r, workId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/schedule", wrapper.Getschedule).Methods("GET")

	r.HandleFunc(options.BaseURL+"/work", wrapper.AddWork).Methods("POST")

	r.HandleFunc(options.BaseURL+"/work/{workId}", wrapper.GetWorkById).Methods("GET")

	r.HandleFunc(options.BaseURL+"/work/{workId}/cancel", wrapper.CancelWorkById).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/work/{workId}/move", wrapper.MoveWorkById).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/work/{workId}/prolongate", wrapper.ProlongateWorkById).Methods("PUT")

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYQW/bOBP9K8R8H7AXVXKc7kW3JhssDDSLYhNgD0GwYMSxzYYiWXJk1xv4vy9I2bJr",
	"MYndJm26yCWRqSFnOPPeG4p3UJnaGo2aPJR34Ksp1jw+onPGhQfrjEVHEuMwV4ROc5IzDD8lYe37VgK5",
	"UFJHk7FxNScoQXDCNyRrhAxoYRFK8OSknsAyA9E4TtLoc6kbahfpJkpNx8PNJKkJJ+jCLE/c0W+cDnD0",
	"j9Ht8l3oPZPVAHeOL2C5GTA3H7GivkXWJuvUCEyuV6P3fJJ6l1q7NjP8y7jbRFb7OcLPvLYKoRxmz5Kv",
	"ZQYOPzXSoYDyamv+dSJyazzdE/lT4OG595rB3Ljbyzh4B6ibOmyZN2RqTrKCDGquG6629p6AVRflFYjq",
	"CDIQ1TDMaKl1EPBS6LDOKKMnnJ4JIymf8xdTUymSebNOGidpsV03h5NGcQcZVE6SrO6p21egxBOnxm/7",
	"soprjSL44rpCpeKz1H9bZyYOvU+6TqFthbBsC3bXzyNiYUjqsWlL6SsnbagNlHA5lZ55dDN0TOAMlbEo",
	"2Ng4dvHnGSPHq1smNRtd/uLZpdS3ZjxmF0Y1YTo7bWwOGShZofZxa5rXwe87y6spsmE+gAwap6CEKZEt",
	"i2I+n+c8vs2NmxSrqb54Pzo9++Pi7M0wH+RTqlXclaSAFgjgZ4FSolEYijxD59vwj/JBfnQUjI1Fza2E",
	"Eo7zQX4MGVhO05iuYj03/Jgg9bPwO1LngM0lTVmol4e4bIvjkWjturWCA8drJHQeyqvdJS8C1jwbO1ND",
	"BvjZqtgxyDUYagElfGrQLSBb5yxYRmy2KsyjCrfmGznZT8bviYXMfpGQeaY43ktPzIxZi+i9YlmbfoWi",
	"ptJAjUcfQgj1ZWRYgMNegfjV5HQs3yYOO4Ffh8x7awIxwuLDwSD8q4wm1BG93Folq4jL4qMPm7vbiur/",
	"DsdQwv+KzXmvWB32iijvUQ92ctNUFfpxoyLz3g7e9kkSaRjJIQXTho1No0Ww/vUJ42tPookARzqeRdVa",
	"rNaGGfimrrlbPEhj4hMfzzRr9l6HmUXX7IxPqMKpQ07INM7Zqq4tbKRmfCa54jcKI5Z7OvFOiNixWwqh",
	"pxMjFk+Wo+7olUjTITFvDnsB9sse6o76KdnAhFXRk2jh8h0AcMIFW2XzRYHukIyvYRhxt4FgcRf+jsTy",
	"wQb1xeo3CyZFqj8FYJwsRuKx/jQSaxmEleCFfrnRuzaiHkq21W9X71916xt0K1ndx/BStF0mSliTUrD4",
	"eh/ktJYvCjyPyE8M+Mfpz08KtYcQ8SjaatNeBCWxdm5myOIXFgvnQca1YOuPwPhBse2zh7/z1UXIj0Tf",
	"03fq7nonUa2D8pWzne9pJj0zcSmu8j16+fdX4ldK7knJQ4nzKE0310b3kvVDZ9JKQOcvxnEfST98cR/1",
	"36Lqzl1bopb75uyVij8tFfct8S4Fl8t/AwAA//+enWOtXRkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
